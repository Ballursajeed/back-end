import { asyncHandler } from "../utils/asynHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import jwt from "jsonwebtoken"


const generateAccessAndRefreshTokens = async (userId) =>{
  try {
      const user = await User.findById(userId)
      const accessToken = user.generateAccessToken()
      const refreshToken = user.generateRefreshToken()

      user.refreshToken = refreshToken
        await user.save({ validateBeforeSave: false })

      return { accessToken, refreshToken }

  } catch (error) {
    throw new ApiError(500, "Something went wrong while generating refresh and access token")
  }
}

const registerUser = asyncHandler( async (req,res) => {
   //get data from frontend
   //validation - not empty
   //check if user already exists: username,email
   //check for image, check for avatar
   //upload them to cloudinary, avatar
   //create user object - create entry in db
   //remove password and refresh token field from response
   //check for user creation
   //return response

//1) get data from user
   const { fullName, email, username, password } = req.body
   console.log("Email:",email);
   console.log("fullname:",fullName);

//2) validation
  if (
    [fullName, email, username, password].some((field) =>
    field?.trim() === "" )
  ){
     throw new ApiError(400,"All fields are required")
     console.log("The full name:",fullName);
  }

//3) check if user already exists
 const existedUser = await User.findOne({
       $or: [{ username }, { email }]
   });
   if (existedUser) {
       throw new ApiError(409, "User with email or username already exist")
       console.log("The full name:",fullName);
   }
   console.log(req.files);
//4) check image and check avatar
  const avatarLocalPath =  req.files?.avatar[0]?.path;
  //const coverImageLocalPath = req.files?.coverImage[0]?.path;

  let coverImagePath;
  if (req.files && Array.isArray(req.files.coverImage) && req.files.coverImage.length >0 ) {
        coverImagePath = req.files.coverImage[0].path;
  }

 console.log("Avatar Local Path:", avatarLocalPath);

 //if (!avatarLocalPath) {
   //  throw  new ApiError(400, "Avatar file is required");
 //}
  console.log("Avatar Local Path:", avatarLocalPath);

//5) upload them cloudinary
  const avatar = avatarLocalPath; // await uploadOnCloudinary(avatarLocalPath);
  const coverImage = coverImagePath //await uploadOnCloudinary(coverImageLocalPath);

 /*if (!avatar) {
       throw  new ApiError(400, "Avatar file is required");
  }*/

//6) create new user in db
 const user = await User.create({
       fullName,
       avatar, // avatar.url || " ",
       coverImage, // coverImage?.url || " ",
       email,
       password,
       username: username.toLowerCase()
 })

//7) remove password and refresh tokens
 const createdUser = await User.findById(user._id).select(
       "-password -refreshToken"
 )

//8) finally check the user creation
 if (!createdUser) {
      throw new ApiError(500, "Something went wrong while registering user!!")
 }

//9) return response
 return res.status(201).json(
     new ApiResponse(200, createdUser, "User Registered successfully!!")
 )

} )

const loginUser = asyncHandler(async (req, res) =>{
    // req body -> data
    // username or email
    //find the user
    //password check
    //access and referesh token
    //send cookie

    const {email, username, password} = req.body
    console.log(email);

    if (!username && !email) {
        throw new ApiError(400, "username or email is required")
    }

    // Here is an alternative of above code based on logic discussed in video:
    // if (!(username || email)) {
    //     throw new ApiError(400, "username or email is required")

    // }

    const user = await User.findOne({
        $or: [{username}, {email}]
    })

    if (!user) {
        throw new ApiError(404, "User does not exist")
    }

   const isPasswordValid = await user.isPasswordCorrect(password)

   if (!isPasswordValid) {
    throw new ApiError(401, "Invalid user credentials")
    }

   const {accessToken, refreshToken} = await generateAccessAndRefreshTokens(user._id)

    const loggedInUser = await User.findById(user._id).select("-password -refreshToken")

    const options = {
        httpOnly: true,
        secure: true
    }

    return res
    .status(200)
    .cookie("accessToken", accessToken, options)
    .cookie("refreshToken", refreshToken, options)
    .json(
        new ApiResponse(
            200,
            {
                user: loggedInUser, accessToken, refreshToken
            },
            "User logged In Successfully"
        )
    )

})

const logoutUser = asyncHandler(async(req, res) => {
    await User.findByIdAndUpdate(
        req.user._id,
        {
            $set: {
                refreshToken: undefined
            }
        },
        {
            new: true
        }
    )

    const options = {
        httpOnly: true,
        secure: true
    }

    return res
    .status(200)
    .clearCookie("accessToken", options)
    .clearCookie("refreshToken", options)
    .json(new ApiResponse(200, {}, "User logged Out"))
})

 const refreshAccessToken = asyncHandler(async (req,res) => {
       const incommingRefreshToken = req.cookies.refreshToken || req.body.refreshToken

       if (!incommingRefreshToken) {
              throw new ApiError(401, "Unauthorized request!!")
       }

   try {
           const decoded = jwt.verify(
            incommingRefreshToken,
            process.env.REFRESH_TOKEN_SECRET
       )

       const user = await User.findById(decoded?._id);

        if (!user) {
              throw new ApiError(401, "Invalid refresh token")
       }

       if (incommingRefreshToken !== user?.refreshToken) {
            throw new ApiError(401, "Refresh token is expired or userd")
        }

        const options = {
           httpOnly: true,
           secure: true
        }

        const { accessToken, newRefreshToken} = await generateAccessAndRefreshTokens(user._id)

        return res.status(200)
        .cookie("accessToken",accessToken, options)
        .cookie("refreshToken", newRefreshToken, options)
        .json(
          new ApiResponse(200,{
                 accessToken, refreshToken: newRefreshToken
          }, "Access token refreshed!!")
        )
   } catch (error) {
            throw new ApiError(401, error?.message || "Invalid refresh token")
   }

 })

 const changeCurrentPassword = asyncHandler(async(req,res) => {
         const { oldPassword, newPassword} } = req.body;

         const user = await User.findById(req.user?._id)
         const isPasswordCorrect = await user.isPasswordCorrect(oldPassword);
         if (!isPasswordCorrect) {
              throw new ApiError(400, "Invalid old password")
         }

         user.password = newPassword
         await user.save({ validateBeforeSave: false })

         return res
         .status(200)
         .json(new ApiResponse(200, {}, "Password changed successfully"))

 })

export {
	 registerUser,
    loginUser,
    logoutUser,
    refreshAccessToken
    }
